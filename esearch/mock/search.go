// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aalug/go-gin-job-search/esearch (interfaces: ESearchClient)

// Package mockesearch is a generated GoMock package.
package mockesearch

import (
	context "context"
	reflect "reflect"

	esearch "github.com/aalug/go-gin-job-search/esearch"
	gomock "github.com/golang/mock/gomock"
)

// MockESearchClient is a mock of ESearchClient interface.
type MockESearchClient struct {
	ctrl     *gomock.Controller
	recorder *MockESearchClientMockRecorder
}

// MockESearchClientMockRecorder is the mock recorder for MockESearchClient.
type MockESearchClientMockRecorder struct {
	mock *MockESearchClient
}

// NewMockESearchClient creates a new mock instance.
func NewMockESearchClient(ctrl *gomock.Controller) *MockESearchClient {
	mock := &MockESearchClient{ctrl: ctrl}
	mock.recorder = &MockESearchClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockESearchClient) EXPECT() *MockESearchClientMockRecorder {
	return m.recorder
}

// SearchJobs mocks base method.
func (m *MockESearchClient) SearchJobs(arg0 context.Context, arg1 string, arg2, arg3 int32) ([]*esearch.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchJobs", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*esearch.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchJobs indicates an expected call of SearchJobs.
func (mr *MockESearchClientMockRecorder) SearchJobs(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchJobs", reflect.TypeOf((*MockESearchClient)(nil).SearchJobs), arg0, arg1, arg2, arg3)
}
